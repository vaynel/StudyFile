<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Mapper는 "시작하기"에 있었음 -->
<!-- namespace : 생성 될 프록시 객체의 타입 -->
<mapper namespace="com.mc.mvc.Mybatis">
	<!-- #{} : preparedStatement의 쿼리 템플릿을 완성 시킨 뒤 파라미터 값을 전달받아 쿼리를 완성한다. 문자열 
		이스케이프처리가 되기 때문에, sqlInjection 공격으로 부터 안전하다. ${} : -->


	<select id="selectOne" resultType="com.mc.mvc.member.dto.Member">
		select * from member where
		user_id = #{userId}
	</select>

	<select id="selectList" resultType="Member">
		select * from member;
	</select>

	<select id="selectListWithDTO" resultType="Member">
		select * from member
		where
		user_id = #{userId}
		and password = #{password}
	</select>

	<select id="selectListWithMap" resultType="Member">
		select * from member
		where
		user_id = #{userId}
		and password = #{password}

	</select>


	<select id="selectListToMap" resultType="map">
		select * from member
		join rent_master using(user_id)

	</select>

	<insert id="insertWithDTO">
		insert into member(user_id,password,tell,email)
		values(#{userId},#{password},#{tell},#{email})
	</insert>

	<insert id="insertWithMap">
		insert into rent_master(user_id,title,rent_book_cnt)
		values(#{member.userId},#{title},#{rentBookCnt})
	</insert>


	<insert id="insertRent" useGeneratedKeys="true"
		keyProperty="rmIdx">
		insert into rent_master(user_id,title,rent_book_cnt)
		values(#{userId},#{title},#{rentBookCnt})
	</insert>

	<insert id="insertRentBook" useGeneratedKeys="true"
		keyProperty="rbIdx">
		insert into rent_book(rm_idx,bk_idx,return_date)
		values(#{rmIdx},#{bkIdx},#{returnDate})
	</insert>

	<insert id="insertRentHistory">
		insert into
		rent_history(rm_idx,bk_idx,rb_idx,state)
		values(#{rmIdx},#{bkIdx},#{rbIdx},#{state})
	</insert>

	<update id="update">
		update member set password = #{password}
		where user_id
		= #{userId}
	</update>

	<delete id="delete">
		delete from member where user_id = #{userId}
	</delete>

	<select id="dynamicIf" resultType="Book">
		select * from book
		where
		<if test="filter == 'title'">
			title like concat('%',#{keyword},'%')
		</if>
		<if test="filter == 'author'">
			author like concat('%',#{keyword},'%')
		</if>
	</select>



	<!-- switch -->
	<select id="dynamicChoose" resultType="Book">
		select * from book
		where
		<choose>
			<when test="filter == 'title'">
				title like concat('%',#{keyword},'%')
			</when>
			<otherwise>
				author like concat('%',#{keyword},'%')
			</otherwise>
		</choose>
	</select>


	<update id="dynamicSet">
		update member
		<set>
			<if test="password != null">
				password = #{password}
			</if>
			<if test="tell != null">
				, tell = #{tell}
			</if>
			<if test="email != null">
				, email = #{email}
			</if>
		</set>
		where user_id = #{userId}
	</update>

	<insert id="dynamicForEach">
		insert to ${table}
		<foreach collection="data" index="key" item="val" open="("
			separator="," close=")">
			${key}
		</foreach>
		values
		<foreach collection="data" index="key" item="val" open="("
			separator="," close=")">
			${val}
		</foreach>



	</insert>

	<select id="dynamicWhere" resultType="Book">
		select * from book
		where
		book_amt > 0
		<foreach collection="filters" item="filter">
			<if test="filter == title">
				title like concat('%',#{keyword},'%')
			</if>
			<if test="filter == author">
				title like concat('%',#{keyword},'%')
			</if>
		</foreach>
	</select>
	
	<resultMap type="map" id="rentData">
		<result column="rm_idx" javaType="string" property="rmIdx"/>
		<result column="rb_idx" javaType="string" property="rbIdx"/>
		<result column="user_id" javaType="string" property="userId"/>
		<result column="return_date" javaType="date" property="returnDate"/>
		<result column="title" javaType="string" />
		<result column="isbn" javaType="string" />
		<result column="rent_book_cnt" javaType="int" property="rentBookCnt"/>

	</resultMap>
	
	<select id="resultMap" resultType="map">
		select
		rm_idx,rb_idx,user_id,return_date,rm.title
		,isbn,rent_book_cnt
		from rent_master rm
		join rent_book using(rm_idx)
		join book using(bk_idx)
		where rb_idx = #{rbIdx}
		
	</select>






</mapper>